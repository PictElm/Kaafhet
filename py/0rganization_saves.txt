def interract(self, goal, whatFor):
    #{
        if isinstance(goal, Entity):
        #{
            if goal.kind == TAG:
                print "reach {}".format(goal.pos) # il est arrive au marqueur
            #attack
            else: # whatfor : 'k' (ou 'g')
                self.attackObj(goal) # essay de la tuee
                print "attack {} at {}".format(goal.kind, goal.pos)
        #}

        elif isinstance(goal, Struct):
        #{
            if self.team != goal.team: # team adverse ou WHILD
            #{
                #harvest
                # whatfor : 'k' ou 'g'
                self.attackObj(goal) # essay de la detruire
                print "harvest {} at {}".format(goal.kind, goal.pos)

                if getForm(goal.kind) == NAT_STRUCT:
                    # meme type que l'inventaire
                    if goal.kind == self.inventoryKind:
                        if getGroup(goal.kind) == getGroup(self.kind):
                            # avantage
                            self.inventoryQuantity+= self.attack*2
                        else:
                            # normal
                            self.inventoryQuantity+= self.attack
                    # inventaire vide
                    elif self.inventoryQuantity == 0:
                        if getGroup(goal.kind) == getGroup(self.kind):
                            # avantage
                            self.inventoryQuantity+= self.attack*2
                        else:
                            # normal
                            self.inventoryQuantity+= self.attack
                    # sinon la ressource est perdu
            #}
            else:
            #{
                # batiment alie
                print "reached {}".format(goal.pos)

                # prendre [1] ressources
                if whatFor[0] == 'g':
                    if goal.inventoryQuantity >= whatFor[1]: #TODO : max invQtt
                        goal.inventoryQuantity-= whatFor[1]
                        self.inventoryQuantity+= whatFor[1]
            #}
        #}
        else:
            raise TypeError("warning : wrong instance in interract(goal)")
    #}

#v_2
def interract(self, goal, whatFor):
    #{
        if isinstance(goal, Entity):
        #{
            if goal.kind == TAG:
                print "reach {}".format(goal.pos) # il est arrive au marqueur
            #attack
            else: # whatfor : 'k' (ou 'g')
                self.attackObj(goal) # essay de la tuee
                print "attack {} at {}".format(goal.kind, goal.pos)
        #}

        elif isinstance(goal, Struct):
        #{
            #{
                print "reach {}".format(goal.pos)

#TODO : tout refaire, c'est faux
                # 1_ prendre/deposer [1] ressources
                # 2_ construire ou detruire
                if whatFor[0] == 'g' and whatFor[1] != 0:
                #{
                    # 1_ inventaire
                    if goal.inventoryQuantity != 0:
                    #{
                        if whatFor[1] < 0: # stoke dans le batiment
                            if goal.inventoryQuantity >= whatFor[1]:
                                # y'a la place
                                self.inventoryQuantity+= whatFor[1]
                                goal.inventoryQuantity-= whatFor[1]
                            elif goal.inventoryQuantity in range(whatFor[1]):
                                # y'a pas : stoke pas tout
                                self.inventoryQuantity+= goal.inventoryQuantit
                                goal.inventoryQuantity = 0
                        elif whatFor[1] > 0: # recupere dans le batiment
                            if goal.inventoryQuantity >= whatFor[1]: #TODO : max invQtt
                                # y'a de quoi
                                self.inventoryQuantity+= whatFor[1]
                                goal.inventoryQuantity-= whatFor[1]
                            elif goal.inventoryQuantity in range(whatFor[1]):
                                # il reste moin que rechercher
                                self.inventoryQuantity+= goal.inventoryQuantit
                                goal.inventoryQuantity = 0
                    #}

                    # 2_ materiaux du batiment lui-mm
                    elif goal.inventoryQuantity == 0:
                    #{
                        #TODO : construire/detruire, invenorySKind = liste
                        if whatFor[1] < 0: # construire
                            for e in goal.inventorySKinds:
                                if e == self.inventoryKind:
                                    goal.inventorySQuantity+= 1
                                    self.inventoryQuantity-= 1
                        elif whatFor[1] > 0: # detruire
#                        # meme type que l'inventaire
#                        if goal.kind == self.inventoryKind:
#                            if getGroup(goal.kind) == getGroup(self.kind):
#                                # avantage
#                                self.inventoryQuantity+= self.attack*2
#                            else:
#                                # normal
#                                self.inventoryQuantity+= self.attack
#                        # inventaire vide
#                        elif self.inventoryQuantity == 0:
#                            if getGroup(goal.kind) == getGroup(self.kind):
#                                # avantage
#                                self.inventoryQuantity+= self.attack*2
#                            else:
#                                # normal
#                                self.inventoryQuantity+= self.attack
#                        # sinon la ressource est perdu
                            pass
                    #}
                #}
            #}
        #}
        else:
            raise TypeError("warning : wrong instance in interract(goal)")
    #}



    def use(self, who = Entity, what = int): #TODO : upg who en what(kind)
    #{
        if getGroup(kindOf) == getGroup(self.kind):
            if self.kind == TOWN_HALL and kindOf == CIVIL:
            #{
                self.civz.entities.append(e(self.pos, self.civz, len(self.civz.entities), kindOf))
                self.civz.waffle-= 10

    #            elif fnc == "upgrade": # upgrade du batiment
    #                if   self.level == 1: you.stone-= 10
    #                elif self.level == 2: you.iron-= 10
    #                self.level+= 1
            #}
            #TODO : autres batiments avec leurs fonctions
            else:
                raise TypeError("this sructure cannot creat any entities")
    #}